{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to wikidatatool","text":"<p>Python package to search item from Wikidata</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://eng-aomar.github.io/wikidatatool</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":""},{"location":"common/#wikidatatool.common.query_wikidata","title":"<code>query_wikidata(sparql_query, sparql_service_url)</code>","text":"<p>Queries a SPARQL endpoint with a given query and returns the results as a pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>sparql_query</code> <code>str</code> <p>The SPARQL query to execute on the endpoint.</p> required <code>sparql_service_url</code> <code>str</code> <p>The URL of the SPARQL service endpoint to query.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>A DataFrame containing the results of the SPARQL query,                    normalized from the JSON response format.</p> <p>Prints</p> <p>str: The SPARQL query being executed, for debugging or logging purposes.</p> <p>Notes</p> <ul> <li>The function uses <code>SPARQLWrapper</code> to create the connection and specify the user agent.</li> <li>Wikidata enforces a strict User-Agent policy, so the user agent must be explicitly set.</li> <li>The results are returned in JSON format, which is then normalized and converted into a DataFrame.</li> </ul> <p>References</p> <ul> <li>https://www.wikidata.org/wiki/Wikidata:Project_chat/Archive/2019/07#problems_with_query_API</li> <li>https://meta.wikimedia.org/wiki/User-Agent_policy</li> </ul> Source code in <code>wikidatatool/common.py</code> <pre><code>def query_wikidata(sparql_query, sparql_service_url):\n    \"\"\"\n    Queries a SPARQL endpoint with a given query and returns the results as a pandas DataFrame.\n\n    Args:\n        sparql_query (str): The SPARQL query to execute on the endpoint.\n        sparql_service_url (str): The URL of the SPARQL service endpoint to query.\n\n    Returns:\n        pandas.DataFrame: A DataFrame containing the results of the SPARQL query, \n                          normalized from the JSON response format.\n\n    Prints:\n        str: The SPARQL query being executed, for debugging or logging purposes.\n\n    Notes:\n        - The function uses `SPARQLWrapper` to create the connection and specify the user agent.\n        - Wikidata enforces a strict User-Agent policy, so the user agent must be explicitly set.\n        - The results are returned in JSON format, which is then normalized and converted into a DataFrame.\n\n    References:\n        - https://www.wikidata.org/wiki/Wikidata:Project_chat/Archive/2019/07#problems_with_query_API\n        - https://meta.wikimedia.org/wiki/User-Agent_policy\n    \"\"\"\n\n    print(sparql_query)  # Print the query for debugging purposes\n\n    # Create the connection to the SPARQL endpoint and set the user-agent\n    sparql = SPARQLWrapper(sparql_service_url, agent=\"Sparql Wrapper on Jupyter example\")\n\n    sparql.setQuery(sparql_query)  # Set the SPARQL query to execute\n    sparql.setReturnFormat(JSON)   # Request the result in JSON format\n\n    # Execute the query and convert the result into a Python dictionary\n    result = sparql.query().convert()\n\n    # Normalize the JSON response into a pandas DataFrame\n    return json_normalize(result[\"results\"][\"bindings\"])\n</code></pre>"},{"location":"common/#wikidatatool.common.search_alterante_label","title":"<code>search_alterante_label(label, lang='en')</code>","text":"<p>Queries Wikidata for an item using an alternate label and returns the results in a structured table.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>The alternate label to search for in Wikidata.</p> required <code>lang</code> <code>str</code> <p>The language code for the label and item descriptions. Defaults to 'en' (English).</p> <code>'en'</code> <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>A table containing results for the query, including article URL, item, label, description,                   entity type list, and other related data.</p> <p>Notes</p> <ul> <li>The query excludes items of type 'Wikimedia disambiguation page' (wd:Q4167410).</li> <li>The query also looks for related articles on Wikipedia in the specified language.</li> <li>If you need to query a different SPARQL endpoint, modify the 'sparql_service_url'.</li> </ul> Source code in <code>wikidatatool/common.py</code> <pre><code>def search_alterante_label(label, lang='en'):\n    \"\"\"\n    Queries Wikidata for an item using an alternate label and returns the results in a structured table.\n\n    Args:\n        label (str): The alternate label to search for in Wikidata.\n        lang (str, optional): The language code for the label and item descriptions. Defaults to 'en' (English).\n\n    Returns:\n        pandas.DataFrame: A table containing results for the query, including article URL, item, label, description,\n                          entity type list, and other related data.\n\n    Notes:\n        - The query excludes items of type 'Wikimedia disambiguation page' (wd:Q4167410).\n        - The query also looks for related articles on Wikipedia in the specified language.\n        - If you need to query a different SPARQL endpoint, modify the 'sparql_service_url'.\n    \"\"\"\n\n    sparql_query = (\n        'SELECT DISTINCT ?article ?item ?itemLabel ?itemDescription (GROUP_CONCAT(DISTINCT(?entity_type); separator = \", \") AS ?entity_type_list) ?main_category ?wikipediaLabel (GROUP_CONCAT(DISTINCT(?altLabel); separator = \", \") AS ?altLabel_list) WHERE {'\n        f'?item ?altLabel \"{label}\"@{lang}.'  # Use the `lang` parameter for the alternate label language\n\n        'MINUS { ?item wdt:P31 wd:Q4167410}'\n\n        'OPTIONAL { ?article schema:about ?item;'\n        f'schema:isPartOf &lt;https://{lang}.wikipedia.org/&gt;;'  # Use the `lang` parameter for Wikipedia language\n        'schema:name ?wikipediaLabel}'\n        'OPTIONAL { ?item skos:altLabel ?altLabel .}'\n        'SERVICE wikibase:label {'\n        f'bd:serviceParam wikibase:language \"{lang}\" .'  # Use the `lang` parameter for item descriptions\n        '}}'\n        'GROUP BY ?article ?item ?itemLabel ?itemDescription ?main_category ?wikipediaLabel'\n    )\n\n    # to query another endpoint, change the URL for the service and the query\n    sparql_service_url = \"https://query.wikidata.org/sparql\"\n    result_table = query_wikidata(sparql_query, sparql_service_url)\n\n    return result_table\n</code></pre>"},{"location":"common/#wikidatatool.common.search_label","title":"<code>search_label(label, lang='en')</code>","text":"<p>Searches for entities in Wikidata that match a given label in a specified language.</p> <p>This function constructs and sends a SPARQL query to the Wikidata Query Service to find entities matching the provided label. The query retrieves various details about the entities including their descriptions, types, alternative labels, main categories, and corresponding Wikipedia articles.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>The label to search for in Wikidata.</p> required <code>lang</code> <code>str</code> <p>The language code for the search and the returned labels (default is 'en' for English).</p> <code>'en'</code> <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>A DataFrame containing the search results with columns for article URL,                    item ID, item label, item description, entity types, main category,                    Wikipedia label, and alternative labels.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; search_wikidata_label(\"Albert Einstein\")\n# Returns a DataFrame with information about entities related to \"Albert Einstein\"\n</code></pre> Source code in <code>wikidatatool/common.py</code> <pre><code>def search_label(label, lang='en'):\n    \"\"\"\n    Searches for entities in Wikidata that match a given label in a specified language.\n\n    This function constructs and sends a SPARQL query to the Wikidata Query Service to find entities\n    matching the provided label. The query retrieves various details about the entities including\n    their descriptions, types, alternative labels, main categories, and corresponding Wikipedia articles.\n\n    Args:\n        label (str): The label to search for in Wikidata.\n        lang (str): The language code for the search and the returned labels (default is 'en' for English).\n\n    Returns:\n        pandas.DataFrame: A DataFrame containing the search results with columns for article URL, \n                          item ID, item label, item description, entity types, main category, \n                          Wikipedia label, and alternative labels.\n\n    Example:\n        &gt;&gt;&gt; search_wikidata_label(\"Albert Einstein\")\n        # Returns a DataFrame with information about entities related to \"Albert Einstein\"\n    \"\"\"\n    sparql_query = (\n        'SELECT DISTINCT ?article ?item ?itemLabel ?itemDescription '\n        '(GROUP_CONCAT(DISTINCT(?entity_type); separator = \", \") AS ?entity_type_list) '\n        '?main_category ?wikipediaLabel '\n        '(GROUP_CONCAT(DISTINCT(?altLabel); separator = \", \") AS ?altLabel_list) WHERE {'\n        'SERVICE wikibase:mwapi {'\n        'bd:serviceParam wikibase:api \"EntitySearch\". '\n        'bd:serviceParam wikibase:endpoint \"www.wikidata.org\".'\n        f'bd:serviceParam mwapi:search \"{label}\".'\n        f'bd:serviceParam mwapi:language \"{lang}\" .'\n        '?item wikibase:apiOutputItem mwapi:item .'\n        '?num wikibase:apiOrdinal true .}'\n        '?item wdt:P31 ?entity_type .'\n        'MINUS { ?item wdt:P31 wd:Q4167410}'\n        'OPTIONAL { ?item wdt:P910 ?main_category}'\n        'OPTIONAL { ?item skos:altLabel ?altLabel .}'\n        'OPTIONAL { ?article schema:about ?item; schema:isPartOf &lt;https://en.wikipedia.org/&gt;; schema:name ?wikipediaLabel}'\n        'SERVICE wikibase:label {'\n        f'bd:serviceParam wikibase:language \"{lang}\" .'\n        '}'\n        '}'\n        'GROUP BY ?article ?item ?itemLabel ?itemDescription ?main_category ?wikipediaLabel'\n    )\n\n    # URL for the Wikidata Query Service\n    sparql_service_url = \"https://query.wikidata.org/sparql\"\n\n    # Execute the query using a helper function (assumed to be defined elsewhere)\n    result_table = query_wikidata(sparql_query, sparql_service_url)\n\n    return result_table\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/eng-aomar/wikidatatool/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>wikidatatool could always use more documentation, whether as part of the official wikidatatool docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/eng-aomar/wikidatatool/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up wikidatatool for local development.</p> <ol> <li> <p>Fork the wikidatatool repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/wikidatatool.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv wikidatatool\n$ cd wikidatatool/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 wikidatatool tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/eng-aomar/wikidatatool/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install wikidatatool, run this command in your terminal:</p> <pre><code>pip install wikidatatool\n</code></pre> <p>This is the preferred method to install wikidatatool, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install wikidatatool from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/eng-aomar/wikidatatool\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use wikidatatool in a project:</p> <pre><code>import wikidatatool\n</code></pre>"},{"location":"wikidatatool/","title":"wikidatatool module","text":""},{"location":"wikidatatool/#wikidatatool.wikidatatool.build_sparql_query","title":"<code>build_sparql_query(label, lang='en', is_alt_label=False)</code>","text":"<p>Constructs the SPARQL query for searching by label or alternate label.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>The label to search for.</p> required <code>lang</code> <code>str</code> <p>The language code for the search and returned labels (default 'en').</p> <code>'en'</code> <code>is_alt_label</code> <code>bool</code> <p>If True, search using the alternate label. Otherwise, search by the main label.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The constructed SPARQL query.</p> Source code in <code>wikidatatool/wikidatatool.py</code> <pre><code>def build_sparql_query(label, lang='en', is_alt_label=False):\n    \"\"\"\n    Constructs the SPARQL query for searching by label or alternate label.\n\n    Args:\n        label (str): The label to search for.\n        lang (str): The language code for the search and returned labels (default 'en').\n        is_alt_label (bool): If True, search using the alternate label. Otherwise, search by the main label.\n\n    Returns:\n        str: The constructed SPARQL query.\n    \"\"\"\n    label_clause = (\n        f'?item ?altLabel \"{label}\"@{lang}.' if is_alt_label else\n        f'bd:serviceParam mwapi:search \"{label}\"; bd:serviceParam mwapi:language \"{lang}\".'\n    )\n\n    query = (\n        'SELECT DISTINCT ?article ?item ?itemLabel ?itemDescription '\n        '(GROUP_CONCAT(DISTINCT(?entity_type); separator = \", \") AS ?entity_type_list) '\n        '?main_category ?wikipediaLabel '\n        '(GROUP_CONCAT(DISTINCT(?altLabel); separator = \", \") AS ?altLabel_list) WHERE {'\n        f'SERVICE wikibase:mwapi {{ {label_clause} }}' if not is_alt_label else f'{label_clause}'\n        '?item wdt:P31 ?entity_type .'\n        'MINUS { ?item wdt:P31 wd:Q4167410}'\n        'OPTIONAL { ?item wdt:P910 ?main_category}'\n        'OPTIONAL { ?item skos:altLabel ?altLabel .}'\n        f'OPTIONAL {{ ?article schema:about ?item; schema:isPartOf &lt;https://{lang}.wikipedia.org/&gt;; schema:name ?wikipediaLabel}}'\n        'SERVICE wikibase:label {'\n        f'bd:serviceParam wikibase:language \"{lang}\" .}}'\n        'GROUP BY ?article ?item ?itemLabel ?itemDescription ?main_category ?wikipediaLabel'\n    )\n\n    return query\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"}]}